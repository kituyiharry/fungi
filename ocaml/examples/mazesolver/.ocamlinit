#load "../../_build/default/examples/mazesolver/lib/mazesolver.cma";;
#load "../../_build/default/src/fungi.cma";;

open Fungi;;
open Fungi.Graph;;
open Fungi.Axiom;;

module SGraph = Graph.MakeGraph(struct 
    type t     = string
    type edge  = float
    let compare= String.compare
end);;

module SGraph2 = Graph.MakeGraph(struct 
    type t     = string
    type edge  = unit
    let compare= String.compare
end);;
module SGraph4 = Graph.MakeGraph(Graph.Plain(String));;

let s  = SGraph.empty;;
let s' = SGraph.empty;;
let t  = SGraph.empty;;
let t' = SGraph.empty;;
let q  = SGraph.empty;;
let q' = SGraph.empty;;
let v  = SGraph.empty;;
let n  = SGraph.empty;;
let g  = SGraph.empty;;
let g2 = SGraph.empty;;
let fl = SGraph.empty;;
let scc = SGraph.empty;;
let ffl = SGraph.empty;;
let ffk = SGraph.empty;;
let ffb = SGraph.empty;;

let s_a = "A";;
let s_b = "B";;
let s_c = "C";;
let s_d = "D";;
let s_e = "E";;
let s_f = "F";;
let s_g = "G";;
let s_h = "H";;
let s_i = "I";;
let s_j = "J";;
let s_k = "K";;
let s_l = "L";;
let s_s = "S";;

let n_0 = "0";;
let n_1 = "1";;
let n_2 = "2";;
let n_3 = "3";;
let n_4 = "4";;
let n_5 = "5";;
let n_6 = "6";;
let n_7 = "7";;
let n_8 = "8";;
let n_9 = "9";;

let nodes  = [ s_a; s_b; s_c; s_d; s_e; s_f; s_g; s_h; s_i; s_j; s_k; s_l; s_s ];;
let nodes' = [ s_a; s_b; s_c; s_d; s_e; s_f; ];;
let nfulk  = [ s_a; s_b; s_c; s_d; ];;
let nuns   = [ n_0; n_1; n_2; n_3; n_4; (*n_5;*) n_6; n_7; n_8; n_9; ];;
let nuns2  = [ n_1; n_2; n_3; n_4; n_5; n_6; n_7; n_8; ];;
let n3     = [ n_1; n_2; n_3; n_4; ];;
let sn     = [ s_a; n_0; n_1; n_2; n_3; s_d ];;
let sn2    = [ s_a; n_0; n_1; n_2; n_3; n_4; n_5; n_6; n_7; n_8; s_d ];;

let s  = List.fold_right (SGraph.add) nodes  s;;
let s' = List.fold_right (SGraph.add) nodes  s';;
let t  = List.fold_right (SGraph.add) nodes' t;;
let t' = List.fold_right (SGraph.add) nodes' t';;
let q  = List.fold_right (SGraph.add) nodes' q;;
let q' = List.fold_right (SGraph.add) nodes' q';;
let v  = List.fold_right (SGraph.add) nodes' v;;
let n  = List.fold_right (SGraph.add) nuns   n;;
let g  = List.fold_right (SGraph.add) nodes' g;;
let g2 = List.fold_right (SGraph.add) nodes' g2;;
let g2 = List.fold_right (SGraph.add) nodes' g2;;
let fl = List.fold_right (SGraph.add) n3     fl;;
let scc= List.fold_right (SGraph.add) nuns2  scc;;
let ffl= List.fold_right (SGraph.add) nfulk   ffl;;
let ffk= List.fold_right (SGraph.add) sn   ffk;;
let ffb= List.fold_right (SGraph.add) sn2   ffb;;

let _ = Printexc.record_backtrace true;;

(* scc *)
let scc_adjlist =
  [
    (n_1,  [n_2;n_3]);
    (n_2,  [n_1;n_4]);
    (n_3,  [n_4;]);
    (n_4,  [n_5;n_6]);
    (n_5,  [n_6;n_3;n_7]);
    (n_6,  [n_8]);
    (n_7,  [n_6]);
    (n_8,  [n_7]);
]

(* dijsktra *)
let s_adjlist = [
    (s_a, [(s_s, 7.); (s_b, 3.); (s_d, 4.)]);
    (s_s, [(s_b, 2.); (s_c, 3.)]);
    (s_c, [(s_l, 2.)]);
    (s_l, [(s_i, 4.); (s_j, 4.)]);
    (s_i, [(s_j, 6.); (s_k, 4.)]);
    (s_j, [(s_k, 4.)]);
    (s_k, [(s_e, 5.)]);
    (s_d, [(s_b, 4.); (s_f, 5.)]);
    (s_f, [(s_h, 3.)]);
    (s_h, [(s_b, 1.); (s_g, 2.)]);
    (s_g, [(s_e, 2.)]);
];;

(* bellman ford *)
let t_adjlist = [
    (s_a, [(s_d,  40.);  (s_b, 5.); (s_c, 35.)]);
    (s_b, [(s_e,  25.);  (s_d, 20.)]);
    (s_c, [(s_e, -30.);  (s_f, 30.)]);
    (s_d, [(s_f,  20.);]);
    (s_e, [(s_f,  25.);  (s_d, 45.)]);
    (s_f, [(s_a,  -1.)]);
]

(* euler circuit *)
let t2_adjlist = [
    (s_a, [(s_b,  40.);  (s_c, 5.)]);
    (s_b, [(s_c,  25.);  (s_d, 20.)]);
    (* create negative cycle with this edge
    (s_c, [(s_d,  -10.);  (s_e, 30.)]);
    *)
    (s_c, [(s_d,  10.);  (s_e, 30.)]);
    (s_d, [(s_e,  20.);  (s_f, 0.)]);
    (s_e, [(s_f,  25.);  (s_a, 45.)]);
    (s_f, [(s_a,  -1.);  (s_b, 0.)]);
]

(* euler path *)
let q_adjlist = [
    (s_a, [(s_b, 0.);(s_c, 0.)]);
    (s_b, [(s_d, 0.)]);
    (s_c, [(s_a, 0.);(s_b, 0.);(s_e, 0.)]);
    (s_d, [(s_c, 0.);(s_f, 0.)]);
    (s_e, [(s_f, 0.)]);
    (s_f, [(s_c, 0.)]);
]

(* euler path - simpler DAG graph *)
let q2_adjlist = [
    (s_a, [(s_b, 0.);]);
    (s_b, [(s_d, 0.);(s_c, 0.)]);
    (s_c, [(s_b, 0.);]);
    (s_d, [(s_e, 0.);]);
    (s_e, [(s_f, 0.)]);
    (s_f, []);
]

let n_adjlist = [
    (n_0, [n_2]);
    (n_2, [n_1]);
    (n_1, [n_3;]);
    (n_3, [n_4; n_0]);
    (*(n_4, [n_6]);*)
    (n_6, [n_3; n_7]);
    (n_7, [n_8]);
    (n_8, [n_9]);
    (n_9, [n_6]);
]

let topo = [
    (s_a, []);
    (s_b, []);
    (s_c, [(s_d, 1.);]);
    (s_d, [(s_a, 1.);]);
    (s_e, [(s_a, 1.); (s_b, 1.)]);
    (s_f, [(s_a, 1.); (s_c, 1.)]);
]

(* Floyd warshall weighted *)
let fl_adjlist = [
    (n_1, [(n_2, 3.); (n_4, 7.)]);
    (n_2, [(n_1, 8.); (n_3, 2.)]);
    (n_3, [(n_1, 5.); (n_4, 1.)]);
    (n_4, [(n_1, 2.)]);
]

(* ford fulkerson wikipedia example - good edge case *)
let ffulk = [
    (s_a, [(s_b, 1000.); (s_c, 1000.)]);
    (s_b, [(s_c, 1.);    (s_d, 1000.)]);
    (s_c, [(s_d, 1000.);]);
    (s_d, []);
];;

(* ffulk 2 - fismet *)

let ffulk2 = [
    (s_a, [(n_0, 10.); (n_1, 10.)]);
    (n_0, [(n_2, 25.);]);
    (n_1, [(n_3, 15.);]);
    (n_2, [(s_d, 10.);]);
    (n_3, [(s_d, 10.); (n_0, 6.);]);
    (s_d, []);
];;

let ffulk2 = [
    (s_a, [(n_0, 10.); (n_1, 10.)]);
    (n_0, [(n_2, 25.);]);
    (n_1, [(n_3, 15.);]);
    (n_2, [(s_d, 10.);]);
    (n_3, [(s_d, 10.); (n_0, 6.);]);
    (s_d, []);
];;

let ffulkb = [
    (s_a, [(n_0, 7.);  (n_1, 2.); (n_2, 1.)]);
    (n_0, [(n_3, 2.);  (n_4, 4.); ]);
    (n_1, [(n_4, 5.);  (n_5, 6.); ]);
    (n_2, [(n_3, 4.);  (n_7, 8.); ]);
    (n_3, [(n_6, 7.);  (n_7, 1.); ]);
    (n_4, [(n_6, 3.);  (n_8, 3.); (n_5, 8.)]);
    (n_5, [(n_3, 3.);  ]);
    (n_6, [(s_d, 1.);  ]);
    (n_7, [(s_d, 3.);  ]);
    (n_8, [(s_d, 4.);  ]);
    (s_d, []);
];;

let heuristics = Hashtbl.create (SGraph.cardinal s);;

module Ser = struct 
    let string_of_elt = Fun.id
    let string_of_wgt = (Float.to_string)
    let elt_of_string = Fun.id
    let wgt_of_string = Float.of_string
end;;

module SGSer = SGraph.Serialize (Ser);;

(* global attributes *)
let gt   = SGSer.StyleTbl.create 1;;

(* node or edge attributes *)
let st'  = SGSer.StyleTbl.create 1;;
let st'' = SGSer.StyleTbl.create 1;;
let st3  = SGSer.StyleTbl.create 1;;

let est  = SGSer.StyleTbl.create 1;;

(* per node style attributes *)
let at   = SGSer.AttrbTbl.create 1;;

(* per edge style attributes *)
let et   = SGSer.AttrbTbl.create 1;;

SGSer.StyleTbl.add gt "rankdir" "LR";;

SGSer.StyleTbl.add st'  "color" "green";;
SGSer.StyleTbl.add st'' "color" "red";;
SGSer.StyleTbl.add st3  "color" "orange";;

SGSer.StyleTbl.add est  "style" "dashed";;

SGSer.AttrbTbl.add at s_s st' ;;
SGSer.AttrbTbl.add at s_b st3 ;;
SGSer.AttrbTbl.add at s_l st'';;

SGSer.AttrbTbl.add et (s_a^"-"^s_b) est;;

(* This heuristic table only works if the target is s_e!! *)
Hashtbl.add heuristics s_s 10.;;
Hashtbl.add heuristics s_a 9.;;
Hashtbl.add heuristics s_b 7.;;
Hashtbl.add heuristics s_c 8.;;
Hashtbl.add heuristics s_d 4.;;
Hashtbl.add heuristics s_e 0.;;
Hashtbl.add heuristics s_f 6.;;
Hashtbl.add heuristics s_g 3.;;
Hashtbl.add heuristics s_h 6.;;
Hashtbl.add heuristics s_i 4.;;
Hashtbl.add heuristics s_j 4.;;
Hashtbl.add heuristics s_k 3.;;
Hashtbl.add heuristics s_l 6.;;

let e_heuristic elt = `Val (Hashtbl.find heuristics elt);; 

let tarjanscc = SGraph.Scc.tarjan;;

let pp_sgraph (g: SGraph.adj SGraph.NodeMap.t) = 
    Format.printf "G: {\n"; 
    List.iter (fun (k, {SGraph.out=v; SGraph.edg=w; _}) ->
        let _ = Format.printf "\t%s ->\t" k in 
        let _ = SGraph.AdjSet.iter (fun y ->
            try  Format.printf " (%s: %F)" y (SGraph.Vertex.edge2 y w)
            with 
                | Not_found -> 
                Format.printf " %s" y
        ) v in 
        Format.print_newline ()
    ) (SGraph.NodeMap.bindings g);
    Format.printf "} "
;;

let (let*) = Option.bind;;

let s   = SGraph.of_weights2 s_adjlist  s;;
let s'  = SGraph.of_weights  s_adjlist  s';;
let t   = SGraph.of_weights  t_adjlist  t;;
let t'  = SGraph.of_weights2 t2_adjlist t';;
let q   = SGraph.of_weights  q_adjlist  q;;
let q'  = SGraph.of_weights  q2_adjlist q';;
let v   = SGraph.of_weights  topo       v;;
let n   = SGraph.of_list     n_adjlist  n;;
let scc = SGraph.of_list    scc_adjlist scc;;
let n'  = SGraph.add_edge    n_4 n_6    n;;
let fl  = SGraph.of_weights  fl_adjlist fl;;
let ffl = SGraph.of_weights ffulk      ffl;;
let ffk = SGraph.of_weights ffulk2     ffk;;
let ffb = SGraph.of_weights ffulkb     ffb;;

(* balance the edges out for an eulerian path *)
let q  = SGraph.add_weight 0. s_b s_k @@ SGraph.add_weight 0. s_k s_d @@ SGraph.add s_k q;;

module SPath = SGraph.Path.Compute(Graph.Biject(Float));;
module SFlow = SGraph.Flow(Graph.Biject(Float));;

let sccsets g = 
    SGraph.Scc.SccSet.iter (fun {link=link;node=x} -> 
        let _ = Format.printf "lowlink: %03d\t" link in
        let _ = Format.printf ">-> node value: " in
        let _ = Format.printf "%s" x in
        Format.printf "\n"
    ) g
;;

let sccgraphs g  =   
    SGraph.Scc.SccMap.iter (fun index (out, elts) -> 
        let _ = Format.printf "+------------------------------------- Scc Low Link: %03d -------------------------------------+\n"  index in
        let _ = List.iter (fun x -> Format.printf " %d " x) out in
        let _ = Format.printf "\n|                                                                                             |\n"  in
        let _ = pp_sgraph elts in
        let _ = Format.printf "\n|                                                                                             |\n"  in
        let _ = Format.printf "+---------------------------------------------------------------------------------------------+\n"  in
        Format.printf "\n"
    ) g
;;

let pp_pset (p: SPath.PathList.t SPath.PathSet.set) = 
    Format.printf "P: [\n"; 
    SPath.PathSet.iter (fun {from; next; via; value} ->
        Format.printf " (%s -> %s -> %s: %s)\n" from via next 
            (Axiom.string_of_wrap (Float.to_string) value)
    ) p;
    Format.printf "] "
;;

let pp_aset (p: string SGraph.AdjSet.set) = 
    Format.printf "P: {"; 
    SGraph.AdjSet.iter (fun elt ->
        Format.printf " (%s) " elt
    ) p;
    Format.printf "} "
;;

#install_printer pp_pset;;
#install_printer pp_aset;;
#install_printer pp_sgraph;;
#install_printer sccsets;;
#install_printer sccgraphs;;

let a_s = SGraph.Path.mkpath s_a s_s `Inf ;;

let small l r = SGraph.Path.mkpath l r `Inf;;

let (uvis, init) = 
    (SGraph.outlist s)
    |>  List.fold_left (fun (kset, acc) (k, v) -> 
        (SGraph.AdjSet.add k kset, SGraph.AdjSet.fold (fun x a -> 
            SPath.PathHeap.insert (SGraph.Path.mkpath k x `Inf) a
        ) v acc)
    ) (SGraph.AdjSet.empty, SPath.PathHeap.empty) 
;;

let _ , init3 = SPath.PathHeap.extract init;;

module F  = Heap.MakeFibHeap (Heap.Surject(Int));;
let    f  = F.of_list [1;1;1;1;1;1;1;1;1;1;1;1;22;3;2];;
let d, f' = F.extract f;;

let timeonly f =
    let t = Unix.gettimeofday () in
    let _res = f () in
    Printf.printf "Execution time: %f secondsn" (Unix.gettimeofday () -. t)
;;

let pp_captbl cap = 
    SFlow.Captbl.iter (fun (pr, nx) ms ->   
        Format.printf "%s\t%s:\t %f\n" pr nx ms
    ) cap
;;


let pp_pshrlb ({ SFlow.excess; SFlow.height }: SFlow.pushrlbl) = 
    Format.printf  "{ %d %f }\n" height excess
;;

let pp_flwtbl (flw: SFlow.pushrlbl SFlow.Flwtbl.t) = 
    SFlow.Flwtbl.iter (fun elt {SFlow.excess;SFlow.height} ->   
        Format.printf "%s:\t { %d %f }\n" elt height excess
    ) flw 
;;

#install_printer pp_captbl;;
#install_printer pp_flwtbl;;
#install_printer pp_pshrlb;;

(* flow capacity table *)

let cap: float SFlow.Captbl.t         = SFlow.Captbl.create 16;;
let flw: SFlow.pushrlbl SFlow.Flwtbl.t = SFlow.Flwtbl.create 16;;

(*#trace SFlow.Captbl.find;;*)
(*#trace SFlow.Flwtbl.find;;*)
(*#trace Float.compare;;*)
(*#trace SGraph.Vertex.edge;;*)
(*#trace SGraph.Vertex.edge2;;*)
(*#trace SGraph.AdjSet.union;;*)
